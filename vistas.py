import streamlit as st
import pandas as pd
import google.generativeai as genai
import os
from datetime import datetime
import io


GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")


# Configurar la API de Gemini
if GEMINI_API_KEY:
    genai.configure(api_key=GEMINI_API_KEY)
    model = genai.GenerativeModel("gemini-pro")
else:
    model = None

# Nombre del archivo Excel
EXCEL_FILE = "expedientes.xlsx"

# Funci√≥n para cargar datos existentes
def cargar_datos():
    try:
        return pd.read_excel(EXCEL_FILE)
    except FileNotFoundError:
        return pd.DataFrame(columns=["Fecha", "CUIJ", "Defensoria"])

# Funci√≥n para guardar datos
def guardar_datos(df):
    df.to_excel(EXCEL_FILE, index=False)

# Funci√≥n para convertir DataFrame a Excel en formato BytesIO
def convertir_a_excel(df):
    output = io.BytesIO()
    df.to_excel(output, index=False)
    output.seek(0)
    return output

# Interfaz de Streamlit
st.set_page_config(page_title="VISTASAPP", layout="wide")
st.title("üìÇ VISTASAPP")
st.title("Gesti√≥n de Expedientes Judiciales")
st.markdown("""
### Bienvenido a VISTASAPP
Registra y gestiona la derivaci√≥n de expedientes judiciales de forma eficiente. 
""")

# Secci√≥n "C√≥mo funciona"
st.markdown("""
## ‚ÑπÔ∏è ¬øC√≥mo funciona?
1Ô∏è‚É£ Ingrese el CUIJ y seleccione la defensor√≠a correspondiente.
2Ô∏è‚É£ Los datos se guardan en un archivo Excel.
3Ô∏è‚É£ Puede ver el reporte diario con la cantidad de expedientes por defensor√≠a.
4Ô∏è‚É£ La IA genera un resumen autom√°tico de los expedientes procesados.
""")

# Entrada de datos
cui = st.text_input("Ingrese el CUIJ del expediente")
defensoria = st.selectbox("Seleccione la Defensor√≠a", [f"Defensor√≠a {i+1}" for i in range(10)])

if st.button("Registrar Expediente"):
    if cui:
        df = cargar_datos()
        nuevo_registro = pd.DataFrame({"Fecha": [datetime.today().strftime('%Y-%m-%d')], "CUIJ": [cui], "Defensoria": [defensoria]})
        df = pd.concat([df, nuevo_registro], ignore_index=True)
        guardar_datos(df)
        st.success("Expediente registrado correctamente.")
    else:
        st.warning("Por favor, ingrese un CUIJ v√°lido.")

# Generar reporte diario
def generar_reporte():
    df = cargar_datos()
    if df.empty:
        return "No hay datos registrados a√∫n."
    resumen = df.groupby("Defensoria").size().reset_index(name="Total Expedientes")
    total_expedientes = len(df)
    
    reporte = f"Resumen del d√≠a {datetime.today().strftime('%Y-%m-%d')}\n"
    reporte += resumen.to_string(index=False)
    reporte += f"\nTotal de expedientes procesados: {total_expedientes}\n"
    
    if model:
        ia_respuesta = model.generate_content(f"Analiza este reporte y sugiere mejoras:\n{reporte}")
        reporte += f"\n\nSugerencias de IA:\n{ia_respuesta.text}"
    
    return reporte

st.subheader("Reporte Diario")
if st.button("Generar Reporte"):
    reporte = generar_reporte()
    st.text_area("Reporte del d√≠a", reporte, height=300)

# Opci√≥n para descargar el archivo Excel
st.subheader("Descargar archivo Excel")
df = cargar_datos()
excel_file = convertir_a_excel(df)
st.download_button(
    label="Descargar Expedientes en Excel",
    data=excel_file,
    file_name=EXCEL_FILE,
    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
)


# Footer
st.markdown("---")
st.caption("Desarrollado por Merce | VISTASAPP 2025 ¬©")